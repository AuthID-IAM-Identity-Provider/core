name: Nightly Release

on:
  push:
    branches:
      - dev
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  release:
    name: Create Nightly Pre-Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Ambil semua history agar semantic-release bisa membandingkan dengan branch main
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install semantic-release dependencies
        run: |
          npm install -g semantic-release @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/changelog @semantic-release/github @semantic-release/git conventional-changelog-conventionalcommits

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2

      - name: Get next version
        id: get_version
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Jalankan dry-run untuk mendapatkan versi pre-release
          DRY_RUN_OUTPUT=$(npx semantic-release --dry-run 2>&1)
          echo "--- Full semantic-release dry-run output ---"
          echo "${DRY_RUN_OUTPUT}"
          echo "--------------------------------------------"

          # Ekstrak versi (termasuk pre-release tag seperti -nightly.1)
          VERSION=$(echo "${DRY_RUN_OUTPUT}" | grep -oP 'the next release version is \K[0-9]+\.[0-9]+\.[0-9]+-nightly\.[0-9]+')
          echo "Debug: Extracted VERSION variable is [${VERSION}]"

          if [ -z "$VERSION" ]; then
            echo "No new version to release. Exiting."
            echo "NO_RELEASE=true" >> $GITHUB_ENV
          else
            echo "Next version is $VERSION"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
          fi

      - name: Prepare Release Assets
        if: env.NO_RELEASE != 'true'
        run: |
          # Kita tidak update pom.xml untuk nightly build, cukup build saja
          mvn -B package -DskipTests
          mkdir -p target/release-assets
          JAR_FILE=$(find target -maxdepth 1 -name "*.jar")
          if [ ! -f "$JAR_FILE" ]; then
            echo "JAR file not found!"
            exit 1
          fi
          
          # Gunakan nama file yang konsisten untuk nightly
          ASSET_NAME="app-${VERSION}"
          mv "$JAR_FILE" "target/release-assets/${ASSET_NAME}.jar"
          cd target/release-assets
          sha256sum "${ASSET_NAME}.jar" > "${ASSET_NAME}.jar.sha256"
          cd ../..

      - name: Run semantic-release
        if: env.NO_RELEASE != 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npx semantic-release
