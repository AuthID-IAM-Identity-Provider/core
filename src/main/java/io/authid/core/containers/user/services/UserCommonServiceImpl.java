package io.authid.core.containers.user.services;

import io.authid.core.containers.user.contracts.UserCommonService;
import io.authid.core.containers.user.entities.UserEntity;
import io.authid.core.containers.user.exceptions.UserNotFoundException;
import io.authid.core.containers.user.repositories.UserRepository;
import io.authid.core.containers.user.request.CreateUserRequest;
import io.authid.core.containers.user.request.UpdateUserRequest;
import io.authid.core.shared.components.exception.BaseApplicationException;
import io.authid.core.shared.rest.services.RestServiceImpl;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.UUID;

@Slf4j
@Service
@Qualifier("userCommonServiceImpl")
@RequiredArgsConstructor
public class UserCommonServiceImpl extends RestServiceImpl<UserEntity, UUID, CreateUserRequest, UpdateUserRequest> implements UserCommonService {

    private final UserRepository repository;
    private final PasswordEncoder passwordEncoder;

    @Override
    @SuppressWarnings("unchecked")
    public UserRepository getRepository() {
        return this.repository;
    }

    @Override
    public List<String> getSearchableColumns() {
        return List.of();
    }

    @Override
    public List<String> getFilterableColumns() {
        return List.of();
    }

    @Override
    protected String getCursorValue(UserEntity entity) {
        return entity.getId().toString();
    }

    @Override
    protected UserEntity onCreating(CreateUserRequest createRequest) {
        UserEntity newUser = new UserEntity();

        // Map fields from CreateUserRequest to UserEntity
        // Assumes CreateUserRequest has getName(), getEmail(), getPassword()
        newUser.setName(createRequest.getName());
        newUser.setEmail(createRequest.getEmail());
        newUser.setPassword(passwordEncoder.encode(createRequest.getPassword())); // Remember to hash passwords in a real application!

        // Set default values or initial states as per UserEntity's design
        // Some fields have default values in the entity itself (e.g., status, failedLoginAttempts, loginCount)
        // If your UserEntity's default constructor/Lombok's @NoArgsConstructor doesn't set defaults,
        // you might need to set them explicitly here if not handled by your database schema.

        // Example: If UserStatus.getDefault() isn't called by @NoArgsConstructor
        // newUser.setStatus(UserStatus.getDefault());

        // For audit fields (createdAt, createdBy, etc.), BaseEntity handles them with Spring Data JPA Auditing.
        // You generally don't set them manually here unless you have a custom setup.

        // If UUID ID is to be generated by the application, uncomment this:
        // newUser.setId(UUID.randomUUID()); // If ID is not auto-generated by DB

        // If email should be unverified by default
        newUser.markUnverifiedEmail(); // sets emailVerifiedAt = null

        // Set initial failed login attempts
        newUser.setFailedLoginAttempts(0);
        newUser.setLoginCount(0);

        return newUser;
    }

    @Override
    protected void onUpdate(UpdateUserRequest updateRequest, UserEntity entity) {

    }

    @Override
    protected BaseApplicationException onNotFound(UUID uuid) {
        return new UserNotFoundException(uuid.toString());
    }
}
